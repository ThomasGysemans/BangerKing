#pragma once

#include <string>

// forward declaration to avoid circular dependency.
// it's possible because I'm only using pointers and not complete types
class Context;

class RuntimeResult;

/// @brief Runs a line as BurgerKing code.
/// Use this method for the CLI.
/// Do not use it to read a file because it's less performant.
/// To read a file, use the overload of this method.
/// @param input The input string to read, parse and interpret.
/// @param ctx The context to use for the interpretation of this line.
/// @return The runtime result generated by the Interpreter.
std::unique_ptr<const RuntimeResult> runLine(
    const std::string& input,
    const std::shared_ptr<Context>& ctx
);

/// @brief Runs a file and build up the source code progresively to store it in READ_FILES.
/// @param path The path towards the file to execute.
/// @param ctx The context to use for the interpretation of this file.
/// @return The runtime result generated by the Interpreter.
std::unique_ptr<const RuntimeResult> runFile(
    const std::string& path,
    const std::shared_ptr<Context>& ctx
);